from utz import parametrize
from dataclasses import dataclass


def fn(f: float, fmt: str) -> str:
    """Example function, to be tested with ``case``s below."""
    return f"{f:{fmt}}"


@dataclass
class case:
    """Container for a test-case; float, format, and expected output."""
    f: float
    fmt: str
    expected: str

    @property
    def id(self):
        return f"fmt-{self.f}-{self.fmt}"


@parametrize(
    case(1.23, "0.1f", "1.2"),
    case(123.456, "0.1e", "1.2e+02"),
    case(-123.456, ".0f", "-123"),
)
def test_fn(f, fmt, expected):
    """Example test, "parametrized" by several ``Cases``s."""
    assert fn(f, fmt) == expected


@parametrize(
    case(1.23, "0.1f", "1.2"),
)
def test_case_id(case, request):
    """Test that the ``id`` property of a ``Case`` is used as the test's ID.

    Also, an argument named ``case`` is populated with the full ``Case`` object.

    ``request`` is a special arg-name that Pytest populates with metadata about the current test case.
    """
    assert case.f == 1.23
    assert case.fmt == "0.1f"
    assert case.id == "fmt-1.23-0.1f"
    assert request.node.name == 'test_case_id[fmt-1.23-0.1f]'


def pow2(n: int) -> int:
    """Example function to be tested by ``case2``s below."""
    return n ** 2


@dataclass
class case2:
    n: int
    # Example field with a default value, omitted from test IDs unless set to a non-default value
    extra: str = "extra str"

    @property
    def sq(self):
        return self.n * self.n


@parametrize(
    case2(11),
    case2(22, extra="extra str"),
)
def test_case2_id(case, request):
    """Test that an ``id`` is autogenerated for "case" classes that don't define one.

    Fields are included iff their value doesn't match the default value (or there is no default value).
    """
    assert request.node.name == f'test_case2_id[{case.n}]'


@parametrize(
    case2(11, extra="AAAA"),
)
def test_case2_id_extra(request):
    """Test that autogenerated ``id``s incorporate non-default field values."""
    assert request.node.name == 'test_case2_id_extra[11-AAAA]'


@parametrize(
    case2(n)
    for n in range(10)
)
def test_pow2(n, sq):
    """Example unpacking a `@property` field (``sq``) from a "case" class."""
    assert pow2(n) == sq
